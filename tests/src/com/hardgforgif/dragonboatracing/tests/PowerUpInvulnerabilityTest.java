package com.hardgforgif.dragonboatracing.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.GL30;
import com.badlogic.gdx.graphics.Texture;
import com.hardgforgif.dragonboatracing.core.Boat;
import com.hardgforgif.dragonboatracing.core.Lane;
import com.hardgforgif.dragonboatracing.core.PowerUpInvulnerability;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

/**
 * Tests the PowerUpInvulnerability class
 */
@RunWith(GdxTestRunner.class)
public class PowerUpInvulnerabilityTest {

    Lane mockLane;
    Boat testBoat;
    PowerUpInvulnerability testPowerUp;

    @Before
    public void init() {
        // Mock the opengl classes using mockito so that libgdx opengl functions can be
        // used
        Gdx.gl20 = Mockito.mock(GL20.class);
        Gdx.gl30 = Mockito.mock(GL30.class);

        mockLane = Mockito.mock(Lane.class);

        testBoat = new Boat(120, 110, 100, 80, 0, mockLane);
        testPowerUp = new PowerUpInvulnerability();
    }

    @Test
    public void testPowerUpInvulnerabilityConstructor() {
        Texture texture = testPowerUp.getObstacleTexture();
        assertEquals("PowerUps/Invulnerability.png", texture.toString(), "Texture file incorrect");
        assertEquals(0, testPowerUp.getX(), "X position incorrect");
        assertEquals(0, testPowerUp.getY(), "Y position incorrect");
        assertTrue(testPowerUp.isPowerUp(), "Should be a powerup obstacle");
    }

    @Test
    public void testApplyPowerUpInvulnerability() {
        testPowerUp.applyPowerUp(testBoat);
        assertEquals(7f, testBoat.getPowerUpTimer(), "Powerup timer set incorrectly");
        assertEquals(true, testBoat.isInvulnerable(), "Powerup not applied");

        testBoat.setPowerUpTimer(4);
        testBoat.setInvulnerability(false);
        testPowerUp.applyPowerUp(testBoat);
        assertEquals(4, testBoat.getPowerUpTimer(), "Powerup timer shouldn't have changed");
        assertEquals(false, testBoat.isInvulnerable(), "Powerup shouldn't be applied");
    }
}
